<?xml version="1.0"?>
<!-- 
Copyright 2004 The Apache Software Foundation
Licensed  under the  Apache License,  Version 2.0  (the "License");
you may not use  this file  except in  compliance with the License.
You may obtain a copy of the License at 

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed  under the  License is distributed on an "AS IS" BASIS,
WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
implied.

See the License for the specific language governing permissions and
limitations under the License.
-->

<project name="JBS Reactory" default="jbs:info" basedir=".">
    <!-- targets for use with <import/> and ant 1.6 -->

    <target name="compile" depends="jbs:compile"/>
    <target name="test" depends="jbs:compile"/>
    <target name="jar" depends="jbs:jar"/>
    <target name="jar:install" depends="jbs:jar:install"/>
    <target name="jar:install-snapshot" depends="jbs:jar:install-snapshot"/>
    <target name="dist" depends="jbs:dist"/>
    <target name="reports" depends="jbs:reports"/>

    <!-- Information management -->

    <target name="jbs:info" depends="jbs:init">
        <echo>
  JBS was called without arguments. JBS is a
  set of ant (http://ant.apache.org/) buildfiles that can be included
  from other ant buildfiles in order to simplify those buildfiles.

  The fact that you're seeing this message probably means that a
  buildfile called this file without specifying what target to run.
  So, we're not doing anything.

  Available targets in JBS include:

        jbs:compile
        jbs:test
        jbs:jar
        jbs:dist
        jbs:reports

  Note these are likely not directly callable; your project buildfile
  will have defined its own targets. Try 'ant -buildhelp' for
  information on the targets available to you.
        </echo>
    </target>

    <target name="jbs:debug" unless="do.not.debug">
        <echo>=======================================================================
  JBS has been invoked, with these settings (some may be defaults):

  jbs.src.dir             = ${jbs.src.dir}
  jbs.build.dir           = ${jbs.build.dir}
  jbs.compile.debug       = ${jbs.compile.debug}
  jbs.compile.deprecation = ${jbs.compile.deprecation}
  jbs.compile.optimize    = ${jbs.compile.optimize}

  project.name              = ${project.name}
  project.version           = ${project.version}
  project.copyright.year    = ${project.copyright.year}
  project.copyright.name    = ${project.copyright.name}

  java sources = ${jbs.src.dir}/java
  java classes = ${jbs.build.dir}/classes
  jarfile      = ${jbs.build.dir}/${project.name}-${project.version}.jar
  javadocs     = ${jbs.build.dir}/docs/apidocs
  junitreports = ${jbs.build.dir}/docs/junitreports
=======================================================================</echo>
    </target>

    <target name="jbs:warn-project.name" unless="project.name.set">
        <echo>=======================================================================
                          WARNING!

  The property 'project.name' has not been set. This will result in a
  jar file with a rather dumb name, being

  ${jbs.build.dir}/${project.name}-${project.version}.jar

  To fix this, add a property to the gump build definition or the
  properties file for the current component.
=======================================================================</echo>
    </target>

    <!-- Basic functionality -->

    <target name="jbs:init">
        <property name="jbs.home" value="${user.home}/.jbs"/>

        <property name="jbs.home" value="${user.home}/.jbs"/>
        <property name="jbs.work" value="${jbs.home}/work"/>
        <property name="jbs.backup" value="${jbs.home}/backup"/>
        <property name="jbs.repository.local" value="${jbs.home}/repository"/>

        <property name="jbs.src.dir" value="${basedir}/src"/>
        <property name="jbs.build.dir" value="${basedir}/target"/>
        <property name="jbs.compile.debug" value="on"/>
        <property name="jbs.compile.optimize" value="off"/>
        <property name="jbs.compile.deprecation" value="off"/>
        <property name="jbs.junit.fork" value="off"/>
        <property name="jbs.junit.dir" value="${basedir}"/>
        <property name="jbs.junit.usefile" value="true"/>

        <property name="jbs.repository.ibiblio" value="http://www.ibiblio.org/maven"/>
        <property name="jbs.repository.default" value="${jbs.repository.ibiblio}"/>

        <property name="project.name" value="some-nameless-jbs-built-component"/>
        <property name="project.copyright.year" value="2004"/>
        <property name="project.copyright.name" value="The Apache Software Foundation"/>

        <tstamp>
            <format property="project.version" pattern="yyyyMMdd"/>
        </tstamp>
        <property name="project.copyright.year" value="1997-2003"/>

        <condition property="project.name.set">
            <isset property="project.name"/>
        </condition>
        <antcall target="jbs:warn-project.name"/>

        <available file="${basedir}/src/java" property="java.src.present"/>
        <available file="${basedir}/src/test" property="test.src.present"/>

        <condition property="no.sources.available">
                <and>
                    <not><isset property="java.src.present"/></not>
                    <not><isset property="test.src.present"/></not>
                </and>
        </condition>
        <antcall target="jbs:debug"/>
    </target>

    <!-- TODO: <target name="jbs:reports" unless="no.source.dir"
            depends="jbs:clover,jbs:javadocs,jbs:java-test-reports"/>-->
    <target name="jbs:reports" unless="no.source.dir"
            depends="jbs:javadocs"/>

    <target name="jbs:compile" depends="jbs:init">
        <antcall target="jbs:reactor">
            <param name="target" value="jar:install-snapshot"/>
            <param name="do.not.debug" value="true"/>
        </antcall>

        <echo>=======================================================================
 Gathering sources and classes from subprojects for ${project.name}
=======================================================================</echo>
        <mkdir dir="${jbs.build.dir}"/>
        <mkdir dir="${jbs.build.dir}/classes"/>
        <copy todir="${jbs.build.dir}/classes">
            <fileset dir="api/target/classes"/>
            <fileset dir="impl/target/classes"/>
        </copy>
        <mkdir dir="${jbs.build.dir}/src"/>
        <copy todir="${jbs.build.dir}/src">
            <fileset dir="api/src/java"/>
            <fileset dir="impl/src/java"/>
        </copy>
    </target>

    <target name="jbs:test" depends="jbs:compile">
        <echo>=======================================================================
 Consolidating test reports for ${project.name}
=======================================================================</echo>

        <!-- note: this completely deviates from the approach maven
             takes to generating the junit reports and stores them
             in a different location. -->

        <mkdir dir="${jbs.build.dir}/docs/junitreports"/>

        <mkdir dir="api/target/test-reports"/><!-- make sure fileset works -->
        <mkdir dir="impl/target/test-reports"/><!-- make sure fileset works -->

        <junitreport todir="${jbs.build.dir}/docs/junitreports">
            <fileset dir="api/target/test-reports">
                <include name="TEST-*.xml"/>
            </fileset>
            <fileset dir="impl/target/test-reports">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${jbs.build.dir}/docs/junitreports"/>
        </junitreport>
    </target>

    <target name="jbs:jar" depends="jbs:init,jbs:compile,jbs:test">
        <echo>=======================================================================
 Generating combined jar for ${project.name}
=======================================================================</echo>
        <mkdir dir="${jbs.build.dir}/classes"/>
        <jar destfile="${jbs.build.dir}/${project.name}-${project.version}.jar" basedir="${jbs.build.dir}/classes"/>

        <echo>
 Jar Generated as

   ${jbs.build.dir}/${project.name}-${project.version}.jar
        </echo>
    </target>

    <target name="jbs:javadocs" depends="jbs:init,jbs:compile">
        <antcall target="jbs:reactor">
            <param name="target" value="javadocs"/>
            <param name="do.not.debug" value="true"/>
        </antcall>
        <echo>=======================================================================
 Generating combined javadocs for ${project.name}
=======================================================================</echo>

        <mkdir dir="${jbs.build.dir}/docs"/>
        <mkdir dir="${jbs.build.dir}/docs/apidocs"/>
        <mkdir dir="${jbs.build.dir}/classes"/><!-- to ensure <classpath/> works -->

        <property name="copyright"
          value="Copyright &amp;copy; ${project.copyright.year} ${project.copyright.name}. All Rights Reserved." />

        <property name="title" value="${project.name} API"/>

        <javadoc
          sourcepath="${jbs.build.dir}/src"
          packagenames="*"
          destdir="${jbs.build.dir}/docs/apidocs"
          windowtitle="${title}"
          doctitle="${title}"
          bottom="${copyright}">

          <link href="http://java.sun.com/j2se/1.4.1/docs/api/"/>
          <classpath>
            <path location="${jbs.build.dir}/classes"/>
          </classpath>

        </javadoc>
    </target>

    <target name="jbs:dist" depends="jbs:init,jbs:jar">
        <antcall target="jbs:reactor">
            <param name="target" value="dist"/>
            <param name="do.not.debug" value="true"/>
        </antcall>

        <mkdir dir="${jbs.build.dir}"/>
        <mkdir dir="${jbs.build.dir}/${project.name}-${project.version}"/>
        <mkdir dir="${jbs.build.dir}/dist"/>

        <echo>=======================================================================
 Building Source/Binary Distribution for ${project.name}
=======================================================================</echo>
        <mkdir dir="${jbs.build.dir}/${project.name}-${project.version}/bin"/>
        <copy todir="${jbs.build.dir}/${project.name}-${project.version}/bin">
            <fileset dir="${jbs.build.dir}">
                <include name="*.jar"/>
                <include name="*.txt"/>
                <include name="*.zip"/>
                <include name="docs"/>
            </fileset>
            <fileset dir="api/target/">
                <include name="*.jar"/>
                <include name="*.zip"/>
            </fileset>
            <fileset dir="impl/target/">
                <include name="*.jar"/>
                <include name="*.zip"/>
            </fileset>
        </copy>
        <zip destfile="${jbs.build.dir}/${project.name}-${project.version}/bin/scr.zip">
            <zipfileset dir="${jbs.build.dir}/src"/>
        </zip>
        <zip destfile="${jbs.build.dir}/dist/${project.name}-${project.version}.zip">
            <zipfileset dir="${jbs.build.dir}/${project.name}-${project.version}/bin"
                prefix="${project.name}-${project.version}"/>
        </zip>

         <echo>
  Distributions generated as

    ${jbs.build.dir}/dist/${project.name}-${project.version}-bin.zip
    ${jbs.build.dir}/dist/${project.name}-${project.version}-src.zip
         </echo>
    </target>

    <target name="jbs:distclean" depends="jbs:init">
        <delete dir="${jbs.build.dir}"/>
        <delete dir="api/target"/>
        <delete dir="impl/target"/>
    </target>

    <!-- Reactor functionality -->

    <target name="jbs:reactor"
            depends="jbs:init">
        <echo>=======================================================================
 Building the api/ and impl/ subprojects, target ${target}
=======================================================================</echo>

        <condition property="reactor.target.isset">
            <isset property="target"/>
        </condition>

        <available file="api/build.xml" property="api.proj.present"/>
        <available file="impl/build.xml" property="impl.proj.present"/>
        <antcall target="jbs:reactor-run-api"/>
        <antcall target="jbs:reactor-run-impl"/>
    </target>

    <target name="jbs:reactor-run-api" if="api.proj.present">
        <antcall target="jbs:reactor-run">
            <param name="dir" value="api"/>
        </antcall>
    </target>

    <target name="jbs:reactor-run-impl" if="impl.proj.present">
        <antcall target="jbs:reactor-run">
            <param name="dir" value="impl"/>
        </antcall>
    </target>

    <target name="jbs:reactor-run" if="reactor.target.isset">
        <ant dir="${dir}" target="${target}" inheritAll="false">
            <property name="project.version" value="${project.version}"/>
            <property name="do.not.debug" value="true"/>
        </ant>
    </target>

    <!-- Repository management -->

    <target name="jbs:jar:install" depends="jbs:jar">
        <echo>=======================================================================
 Installing ${project.name} jar into local repository
=======================================================================</echo>

        <mkdir dir="${jbs.home}/repository/${project.name}/jars/"/>
        <copy todir="${jbs.home}/repository/${project.name}/jars/"
                file="${jbs.build.dir}/${project.name}-${project.version}.jar"/>
    </target>

    <target name="jbs:jar:install-snapshot" depends="jbs:jar">
        <echo>=======================================================================
 Installing ${project.name} jar into local repository as snapshot
=======================================================================</echo>

        <mkdir dir="${jbs.home}/repository/${project.name}/jars/"/>
        <tstamp>
            <format property="snapshot.version" pattern="yyyyMMdd"/>
        </tstamp>
        <copy tofile="${jbs.home}/repository/${project.name}/jars/${project.name}-SNAPSHOT.jar"
                file="${jbs.build.dir}/${project.name}-${project.version}.jar"/>
        <copy tofile="${jbs.home}/repository/${project.name}/jars/${project.name}-${snapshot.version}.jar"
                file="${jbs.build.dir}/${project.name}-${project.version}.jar"/>
    </target>
    
    <target name="jbs:gump-descriptor" depends="jbs:init">
        <antcall target="jbs:reactor">
            <param name="target" value="jbs:gump-descriptor"/>
            <param name="do.not.debug" value="true"/>
        </antcall>
    </target>
</project>